package com.expedia.content.media.processing.pipeline.reporting;

import java.io.IOException;
import java.text.MessageFormat;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.Map;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBIgnore;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBRangeKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.expedia.content.media.processing.pipeline.domain.Domain;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.rabbitmq.tools.json.JSONWriter;

/**
 * Log Entry representation.
 */
@DynamoDBTable(tableName = "cs-mediadb-MediaProcessLog")
public class LogEntry {
    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();
    private final String fileName;
    private final String mediaId;
    private final Activity activity;
    private final Date activityTime;
    private final Domain domain;
    private final String domainId;
    private final String derivativeCategory;
    private String appName;
    private String logGuid;


    public LogEntry(final String fileName, final String mediaId, final Activity activity, final Date activityTime, final Domain domain,
            final String domainId, final String derivativeCategory) {
        this.fileName = fileName;
        this.mediaId = mediaId;
        this.activity = activity;
        this.activityTime = activityTime;
        this.domain = domain;
        this.domainId = domainId;
        this.derivativeCategory = derivativeCategory;
    }

    /**
     * This is an abbreviated logEntry for the ImageMessage logEntry list, since all the other data will be included in
     * the ImageMessage it's redundant to have the extra fields.
     * @param app the app where the log occurred.
     * @param activity the activity being logged.
     * @param activityTime the time of the activity that occurred.
     */
    public LogEntry(final App app, final Activity activity, final Date activityTime) {
        this.fileName = null;
        this.mediaId = null;
        this.activity = activity;
        this.activityTime = activityTime;
        this.domain = null;
        this.domainId = null;
        this.derivativeCategory = null;
        this.appName = app.getName();
    }
    
    @DynamoDBAttribute(attributeName = "FileName")
    public String getFileName() {
        return fileName;
    }
    
    @DynamoDBHashKey(attributeName = "MediaGUID")
    public String getMediaId() {
        return mediaId;
    }
    
    @DynamoDBAttribute(attributeName = "ActivityType")
    public String getActivityName() {
        return (activity == null) ? null : activity.getName();
    }
    
    public Date getActivityTime() {
        return (activityTime == null) ? null : new Date(activityTime.getTime());
    }

    public Long getActivityTimeMillis() {
        return (activityTime == null) ? null : activityTime.getTime();
    }
    
    @DynamoDBAttribute(attributeName = "MediaType")
    public String getMediaType() {
        return (domain == null) ? null : domain.getDomain();
    }
    
    @DynamoDBAttribute(attributeName = "DomainId")
    public String getDomainId() {
        return domainId;
    }
    
    @DynamoDBAttribute(attributeName = "DerivativeCategory")
    public String getDerivativeCategory() {
        return derivativeCategory;
    }
    
    @DynamoDBAttribute(attributeName = "AppName")
    public String getAppName() {
        return appName;
    }
    
    public void setAppName(String appName) {
        this.appName = appName;
    }
    
    @DynamoDBIgnore
    public Activity getActivity() {
        return activity;
    }
    
    @DynamoDBIgnore
    public Domain getDomain() {
        return domain;
    }
    
    @DynamoDBAutoGeneratedKey
    @DynamoDBRangeKey
    @DynamoDBAttribute(attributeName = "LogGUID")
    public String getLogGuid() {
        return logGuid;
    }
    
    public void setLogGuid(String logGuid) {
        this.logGuid = logGuid;
    }
    
    @Override
    public String toString() {
        return "LogEntry{" + "fileName='" + fileName + "\' guid=" + mediaId + ", activity=" + activity + ", activityTime=" + activityTime
                + ", domain=" + domain + ", domainId=" + domainId + ", derivativeCategory=" + derivativeCategory + "}";
    }

    public String toStringForImageMessage() {
        return "LogEntry{"
                + "appName='" + appName + "\', "
                + "activity=" + activity.getName() + ", "
                + "activityTime=" + activityTime.getTime()
                + "}";
    }

    public String toJSONMessage() {
        Map<String, Object> mapMessage = new LinkedHashMap<>();
        mapMessage.put("fileName", (fileName == null) ? null : fileName);
        mapMessage.put("mediaId", (mediaId == null) ? null : mediaId);
        mapMessage.put("activityName", (activity == null) ? null : activity.getName());
        mapMessage.put("activityTime", (activityTime == null) ? null : activityTime.getTime());
        mapMessage.put("domainId", (domainId == null) ? null : domainId);
        mapMessage.put("appName", (appName == null) ? null : appName);
        mapMessage.put("domainName", (domain == null) ? null : domain.getDomain());
        mapMessage.put("derivativeCategory", (derivativeCategory == null) ? null : derivativeCategory);

        return new JSONWriter().write(mapMessage);
    }

    public static LogEntry getLogFromMessage(String jsonMessage) throws IOException {
        Map logMap = buildMapFromJson(jsonMessage);
        Activity activityProperty = Activity.getActivityForName((String) logMap.get("activityName"));
        Domain domainProperty = Domain.findDomain((String) logMap.get("domainName"));
        final Date logDate = new Date((Long) logMap.get("activityTime"));
        final LogEntry logEntry =
                new LogEntry((String) logMap.get("fileName"), (String) logMap.get("mediaId"), activityProperty, logDate, domainProperty,
                        (String) logMap.get("domainId"), (String) logMap.get("derivativeCategory"));
        return logEntry;
    }

    private static Map buildMapFromJson(String jsonMessage) throws IOException {
        try {
            return OBJECT_MAPPER.readValue(jsonMessage, Map.class);
        } catch (IOException ex) {
            final String errorMsg = MessageFormat.format("Error parsing/converting Json message: {0}", jsonMessage);
            throw new IOException(errorMsg, ex);
        }
    }
}
